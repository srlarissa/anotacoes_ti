{
	"nodes":[
		{"id":"a793ef96df2d9fb1","type":"text","text":"**COLLECTIONS**","x":-125,"y":170,"width":185,"height":60,"color":"6"},
		{"id":"e73565d31c8c25ed","type":"text","text":"**LIST**\n\n- Derivam dos Arrays;\n- Tem comprimento dinâmico;\n- Aceitam itens duplicados.","x":-800,"y":110,"width":297,"height":180,"color":"2"},
		{"id":"d7893bf882447d7d","type":"text","text":"**BUSCA:** O(n)","x":-2000,"y":-700,"width":250,"height":50,"color":"2"},
		{"id":"1061eb39cbab5973","type":"text","text":"**ACESSO:** O(1)","x":-2000,"y":-255,"width":250,"height":50,"color":"2"},
		{"id":"c0fd84367efb46aa","type":"text","text":"**ACESSO:** O(1)","x":-2000,"y":750,"width":250,"height":60,"color":"2"},
		{"id":"d27b3dd9baa0b9a6","type":"text","text":"**ACESSO:** O(n)","x":-2000,"y":260,"width":250,"height":60,"color":"2"},
		{"id":"a7f0780786390ef5","type":"text","text":"**SET**\n\n","x":520,"y":80,"width":297,"height":240,"color":"4"},
		{"id":"1430a32d7a1ca350","type":"text","text":"**LINKEDLIST**\n\nArmazena elementos em nós encadeados e guarda em seu corpo o ponteiro para o próximo elemento (e para o anterior se for duplamente encadeada). É ideal para lógicas que efetuem muitas adições e remoções.","x":-1480,"y":-700,"width":337,"height":230,"color":"2"},
		{"id":"dc6af354889f4ad5","type":"text","text":"**ARRAYLIST**\n\n Armazena os itens sequencialmente e é a escolha ideal quando se deseja acesso rápido aos elementos, uma vez que os valores armazenados são acessados através do índice. Não é thread-safe.","x":-1480,"y":-170,"width":337,"height":220,"color":"2"},
		{"id":"084c08e27c4fdea1","type":"text","text":"**MAP**\n\n- Funcionam por chave e valor;\n- Chaves não podem ser duplicadas, mas valores podem;\n- Ao usar put() em uma chave já existente, o valor será substituído.","x":-653,"y":-920,"width":373,"height":220,"color":"1"},
		{"id":"4634acc678539a05","type":"text","text":"**ADIÇÃO:** O(1) se for o primeiro elemento e O(n) se for arbitrário","x":-2000,"y":-620,"width":250,"height":115,"color":"2"},
		{"id":"8aa3b854f9c467ee","type":"text","text":"**REMOÇÃO:** O(1) se for o primeiro elemento e O(n) se for arbitrário","x":-2000,"y":-470,"width":250,"height":110,"color":"2"},
		{"id":"5dc914da923a9efe","type":"text","text":"**BUSCA:** O(n)","x":-2000,"y":-170,"width":250,"height":60,"color":"2"},
		{"id":"a3a69fa9d8676555","type":"text","text":"**ADIÇÃO:** O(1)","x":-2000,"y":-60,"width":250,"height":60,"color":"2"},
		{"id":"2e803c1dad17358d","type":"text","text":"**REMOÇÃO:** O(n)","x":-2000,"y":50,"width":250,"height":60,"color":"2"},
		{"id":"9f2a6d7a23628c2e","type":"text","text":"**BUSCA:** O(n)","x":-2000,"y":350,"width":250,"height":60,"color":"2"},
		{"id":"d435ef1dd04d99cd","type":"text","text":"**ADIÇÃO:** O(1)","x":-2000,"y":440,"width":250,"height":60,"color":"2"},
		{"id":"aa0e43304e6f329a","type":"text","text":"**REMOÇÃO:** O(1)","x":-2000,"y":530,"width":250,"height":60,"color":"2"},
		{"id":"b285b59ddcad573a","type":"text","text":"**BUSCA:** O(n)","x":-2000,"y":840,"width":250,"height":60,"color":"2"},
		{"id":"e572da461ca16f24","type":"text","text":"**ADIÇÃO:** O(1)","x":-2000,"y":930,"width":250,"height":60,"color":"2"},
		{"id":"431965dccc9a744a","type":"text","text":"**REMOÇÃO:** O(n)","x":-2000,"y":1020,"width":250,"height":60,"color":"2"},
		{"id":"cf240e02ca191fa7","type":"text","text":"**VECTOR**\n\n Armazena os itens sequencialmente e, cada que vez precisa ser redimensionado, ele dobrará de tamanho.","x":-1481,"y":810,"width":338,"height":180,"color":"2"},
		{"id":"06f1904ee069283a","type":"text","text":"**STACK**\n\n Armazena os itens sequencialmente mas o último a entrar é o primeiro a sair. É thread safe também, ideal para ambientes multi-thread.","x":-1481,"y":350,"width":337,"height":180,"color":"2"},
		{"id":"e3369e306a1de841","type":"text","text":"**ACESSO:** O(n)","x":-2000,"y":-810,"width":250,"height":70,"color":"2"},
		{"id":"e9379b13474fa458","type":"text","text":"**ACESSO:** O(1) para ver quaisquer pontas.","x":177,"y":1685,"width":242,"height":90,"color":"5"},
		{"id":"23e93dd53d66964c","type":"text","text":"**BUSCA:** O(n) ","x":479,"y":1685,"width":160,"height":50,"color":"5"},
		{"id":"c4c35085313d2079","type":"text","text":"**ADIÇÃO:** O(1) para quaisquer pontas.","x":699,"y":1685,"width":242,"height":90,"color":"5"},
		{"id":"382acc394937358a","type":"text","text":"**REMOÇÃO:** O(1) para quaisquer pontas.","x":999,"y":1685,"width":242,"height":90,"color":"5"},
		{"id":"dd06879cc0c4c1c5","type":"text","text":"**DEQUEUE**\n\n- É uma fila de duas pontas, ou seja, é possível inserir e remover itens tanto do começo quanto do fim;\n- Pode ser implementada principalmente de três formas:\n\t- **ArrayDeque:** Ideal para uso geral;\n\t- **ConcurrentLinkedDeque:** Ideal para ambientes multi-thread.","x":479,"y":1170,"width":462,"height":280,"color":"5"},
		{"id":"0c0c1a0c70581cf6","type":"text","text":"**ARRAY DEQUEUE**\n\n- Aplicação de Deque baseada em um array redimensionável;\n- Utiliza a lógica de Array Circular;\n- Acesso a elementos apenas nas extremidades;\n- Não é thread-safe;\n- Possível usar como pilha ou fila;\n- Não permite adição de elementos null;\n- Mantém a ordem de adição.","x":1417,"y":1685,"width":480,"height":300,"color":"5"},
		{"id":"5206734e82138078","type":"text","text":"**CONCURRENT LINKED DEQUE**\n\n- Funcional em ambientes multi-thread;\n- Baseada em **listas duplamente encadeadas e não bloqueantes** (ou seja, em vez de utilizar locks, utilizam técnicas atômicas de concorrência, nesse caso o CAS);\n- Sem acesso por índice;\n- Não permite null;\n- Mantém a ordem de adição.","x":1977,"y":1685,"width":480,"height":265,"color":"5"},
		{"id":"761eb5e21fa83526","type":"text","text":"**ACESSO:** O(1), mas apenas o valor com maior prioridade é acessível\n\n","x":-1366,"y":1710,"width":300,"height":100,"color":"5"},
		{"id":"d7dfead2fcee1c34","type":"text","text":"**BUSCA:** O(n)\n\n","x":-1002,"y":1710,"width":161,"height":50,"color":"5"},
		{"id":"878c2d84188fb073","type":"text","text":"**PRIORITY QUEUE**\n\n- Sistema de fila que obedece uma regra de prioridade estipulada (ordem crescente, decrescente, etc.) definida por um Comparator;\n- O elemento com maior prioridade é sempre o primeiro a sair, não importando quando ele foi inserido.\n- Em Java, são implementadas utilizando um [heap binário mínimo](obsidian://open?vault=Obsidian&file=anotacoes_ti%2FPrograma%C3%A7%C3%A3o%2FT%C3%B3picos%20pendentes)","x":-957,"y":1135,"width":454,"height":350,"color":"5"},
		{"id":"e2246c89f72434c7","type":"text","text":"**ADIÇÃO:** O(log n), apesar da adição ser feita com O(1), na pior das hipóteses, será necessário gerar uma [percolação](obsidian://open?vault=Obsidian&file=anotacoes_ti%2FPrograma%C3%A7%C3%A3o%2FT%C3%B3picos%20pendentes) para reorganização a queue de acordo com a prioridade estabelecida.\n\n","x":-783,"y":1710,"width":280,"height":240,"color":"5"},
		{"id":"62e01c140098380d","type":"text","text":"**REMOÇÃO:** O(log n) se for o elemento da raiz, O(n) pela necessidade de reorganização do heap executada a remoção.","x":-444,"y":1710,"width":300,"height":140,"color":"5"},
		{"id":"38702584fd651165","type":"text","text":"**QUEUE**\n\n- FIFO (First In, First Out - Primeiro a entrar, Primeiro a sair);\n- Útil para fluxo de dados ordenados;\n- Simula filas reais.","x":-180,"y":680,"width":297,"height":240,"color":"5"}
	],
	"edges":[
		{"id":"85b02c933d150ebe","fromNode":"a793ef96df2d9fb1","fromSide":"bottom","toNode":"38702584fd651165","toSide":"top"},
		{"id":"42a2a9726abfca6d","fromNode":"a793ef96df2d9fb1","fromSide":"right","toNode":"a7f0780786390ef5","toSide":"left"},
		{"id":"e1dec57cec15be2e","fromNode":"a793ef96df2d9fb1","fromSide":"left","toNode":"e73565d31c8c25ed","toSide":"right"},
		{"id":"7f45e5e7a6e55707","fromNode":"e73565d31c8c25ed","fromSide":"left","toNode":"1430a32d7a1ca350","toSide":"right"},
		{"id":"9d4a8e8d6e3cd57b","fromNode":"1430a32d7a1ca350","fromSide":"left","toNode":"e3369e306a1de841","toSide":"right"},
		{"id":"87b941d4aa35f459","fromNode":"1430a32d7a1ca350","fromSide":"left","toNode":"d7893bf882447d7d","toSide":"right"},
		{"id":"e27ea8f1303deb9c","fromNode":"1430a32d7a1ca350","fromSide":"left","toNode":"4634acc678539a05","toSide":"right"},
		{"id":"66ac46016d6b1ece","fromNode":"1430a32d7a1ca350","fromSide":"left","toNode":"8aa3b854f9c467ee","toSide":"right"},
		{"id":"7b00985c3b8d04b5","fromNode":"e73565d31c8c25ed","fromSide":"left","toNode":"dc6af354889f4ad5","toSide":"right"},
		{"id":"25a1a32b97c377f9","fromNode":"dc6af354889f4ad5","fromSide":"left","toNode":"1061eb39cbab5973","toSide":"right"},
		{"id":"9d494eded2df752b","fromNode":"dc6af354889f4ad5","fromSide":"left","toNode":"5dc914da923a9efe","toSide":"right"},
		{"id":"50255ad002ce867d","fromNode":"dc6af354889f4ad5","fromSide":"left","toNode":"a3a69fa9d8676555","toSide":"right"},
		{"id":"79db2ba71182c1e4","fromNode":"dc6af354889f4ad5","fromSide":"left","toNode":"2e803c1dad17358d","toSide":"right"},
		{"id":"47244ae21041dbcd","fromNode":"e73565d31c8c25ed","fromSide":"left","toNode":"06f1904ee069283a","toSide":"right"},
		{"id":"9f5aa07fc7be182f","fromNode":"06f1904ee069283a","fromSide":"left","toNode":"d27b3dd9baa0b9a6","toSide":"right"},
		{"id":"9c34c8f8148b4759","fromNode":"06f1904ee069283a","fromSide":"left","toNode":"9f2a6d7a23628c2e","toSide":"right"},
		{"id":"33939c3844a5f0ff","fromNode":"06f1904ee069283a","fromSide":"left","toNode":"d435ef1dd04d99cd","toSide":"right"},
		{"id":"4fd8eae1a746bd1a","fromNode":"06f1904ee069283a","fromSide":"left","toNode":"aa0e43304e6f329a","toSide":"right"},
		{"id":"59a8e2e52e1efec8","fromNode":"e73565d31c8c25ed","fromSide":"left","toNode":"cf240e02ca191fa7","toSide":"right"},
		{"id":"434a1e93cf3c2586","fromNode":"cf240e02ca191fa7","fromSide":"left","toNode":"c0fd84367efb46aa","toSide":"right"},
		{"id":"c4e413abe9393d68","fromNode":"cf240e02ca191fa7","fromSide":"left","toNode":"b285b59ddcad573a","toSide":"right"},
		{"id":"a5298a7cb2e60517","fromNode":"cf240e02ca191fa7","fromSide":"left","toNode":"e572da461ca16f24","toSide":"right"},
		{"id":"9f267e3df95d672d","fromNode":"cf240e02ca191fa7","fromSide":"left","toNode":"431965dccc9a744a","toSide":"right"},
		{"id":"8bce76d7138ede7f","fromNode":"878c2d84188fb073","fromSide":"bottom","toNode":"761eb5e21fa83526","toSide":"top"},
		{"id":"60617cde76ed2fdc","fromNode":"878c2d84188fb073","fromSide":"bottom","toNode":"d7dfead2fcee1c34","toSide":"top"},
		{"id":"b3b8b4c55f1dbd2e","fromNode":"878c2d84188fb073","fromSide":"bottom","toNode":"e2246c89f72434c7","toSide":"top"},
		{"id":"250b97ffd6cf34e4","fromNode":"878c2d84188fb073","fromSide":"bottom","toNode":"62e01c140098380d","toSide":"top"},
		{"id":"dda007410ad64100","fromNode":"38702584fd651165","fromSide":"bottom","toNode":"878c2d84188fb073","toSide":"top"},
		{"id":"c0637c456942817f","fromNode":"38702584fd651165","fromSide":"bottom","toNode":"dd06879cc0c4c1c5","toSide":"top"},
		{"id":"285e2bf3ad990d7e","fromNode":"dd06879cc0c4c1c5","fromSide":"bottom","toNode":"e9379b13474fa458","toSide":"top"},
		{"id":"e62644acd7c925b4","fromNode":"dd06879cc0c4c1c5","fromSide":"bottom","toNode":"c4c35085313d2079","toSide":"top"},
		{"id":"9dd450c536b9e4ef","fromNode":"dd06879cc0c4c1c5","fromSide":"bottom","toNode":"382acc394937358a","toSide":"top"},
		{"id":"bbd74847d010c3f2","fromNode":"dd06879cc0c4c1c5","fromSide":"bottom","toNode":"23e93dd53d66964c","toSide":"top"},
		{"id":"019824aeda6aad5a","fromNode":"dd06879cc0c4c1c5","fromSide":"right","toNode":"0c0c1a0c70581cf6","toSide":"top"},
		{"id":"94058fa94a0674d5","fromNode":"dd06879cc0c4c1c5","fromSide":"right","toNode":"5206734e82138078","toSide":"top"}
	]
}